
class SeekingBulletScript : ZilchComponent
{
    var HitEnemies : Array[Cog] = Array[Cog]();
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStart);
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function CheckForPriorCollision(currEnemy : Cog) : Boolean
    {
        var wasHit = false;
        foreach (var enemy in this.HitEnemies)
        {
            if (currEnemy == enemy)
            {
                return true;
            }
        }
            
        return false;
    }

    function OnCollisionStart(event : CollisionEvent)
    {
        var currentSpeed = Math.Length(this.Owner.RigidBody.Velocity);
        var normVelocity = this.Owner.RigidBody.Velocity / currentSpeed;
        
        this.HitEnemies.Add(event.OtherObject);
        var enemyList = this.Space.FindAllObjectsByName("Enemy");
        
        var closest = this.Owner;
        
        var closestDistanceSq = Real.PositiveMax;
        
        foreach(var currEnemy in enemyList)
        {
            if (this.CheckForPriorCollision(currEnemy))
            {
                continue;
            }
            var bulletToEnemy = currEnemy.Transform.WorldTranslation - this.Owner.Transform.WorldTranslation;
            
            var distanceSq = Math.LengthSq(bulletToEnemy);
            
            // normalize the vector
            bulletToEnemy /= distanceSq;
            
           // if(distanceSq < closestDistanceSq && Math.Dot(normVelocity, bulletToEnemy) > 0)
           // {
           //    closestDistanceSq = distanceSq;
                
           //    closest = currEnemy;
           //}
            if(distanceSq < closestDistanceSq)
            {
                closestDistanceSq = distanceSq;
                
                closest = currEnemy;
            }
        }
        if (closest == this.Owner) 
        {
            this.Owner.Destroy();
        }
        var angle = Math.Normalize(closest.Transform.Translation - this.Owner.Transform.Translation);
        this.Owner.RigidBody.Velocity = angle * currentSpeed * 2;
    }
    
}
