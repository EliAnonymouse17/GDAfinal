
class SeekingBulletScript : ZilchComponent
{
    var HitEnemies : Array[Cog] = Array[Cog]();
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStart);
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnCollisionStart(event : CollisionEvent)
    {
        this.HitEnemies.Add(event.OtherObject);
        var enemyList = this.Space.FindAllObjectsByName("Enemy");
        
        var closest = this.Owner;
        
        var closestDistance = 9000000000000.0;
        
        foreach(var currEnemy in enemyList)
        {
            var wasHit = false;
            foreach (var enemy in this.HitEnemies)
            {
                if (currEnemy == enemy)
                {
                    wasHit = true;
                    break;
                }
            }
            if (wasHit) {continue;}
            var bulletToEnemy = currEnemy.Transform.WorldTranslation - this.Owner.Transform.WorldTranslation;
            
            var distance = Math.Length(bulletToEnemy);
            
            // normalize the vector
            bulletToEnemy /= distance;
            
            if(distance < closestDistance && Math.Dot(this.Owner.RigidBody.Velocity, bulletToEnemy) > 0)
            {
                closestDistance = distance;
                
                closest = currEnemy;
            }
        }
        if (closest == this.Owner) {this.Owner.Destroy();}
        var angle = Math.Normalize(closest.Transform.Translation - this.Owner.Transform.Translation);
        this.Owner.RigidBody.Velocity = angle * 25;
    }
    
}
