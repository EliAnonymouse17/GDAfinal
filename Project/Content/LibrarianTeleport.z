class LibrarianTeleport : ZilchComponent
{
    
    var TeleportRuneArray : Array[Cog] = Array[Cog]();
    
    [Property]
    var TeleportAnimation : SpriteSource = null;
    
    [Property]
    var TeleportDelay : Real = 10;
    
    var TeleportTimer : Real = 4;
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var teleportRunes = this.Space.FindAllObjectsByName("TeleportRune");
        
        
        // check to see if all teleport runes are already in the array
        if(this.TeleportRuneArray.Count != 5)
        {
            // add the teleport runes to the teleportrunearay
            foreach (var rune in teleportRunes)
            {
                this.TeleportRuneArray.Add(rune);
                
            }
        }
        this.TeleportTimer -= event.Dt;
        
        if(this.TeleportTimer <= 0)
        {
            var randomGenerator : Random = Random();
            // get our random number
            var dieRoll = randomGenerator.DieRoll(5);
            
            
            // make variables so we don't need to type as much
            var runePosition = this.TeleportRuneArray[dieRoll - 1].Transform.WorldTranslation;
            var ownerPosition = this.Owner.Transform.WorldTranslation;
            
            if(ownerPosition.X != runePosition.X)
            {
                
                ownerPosition = runePosition;
                
                // set position
                this.Owner.Transform.WorldTranslation = ownerPosition;
                
                // reset timer
                this.TeleportTimer = this.TeleportDelay;
                
                if(ownerPosition.Z == runePosition.Z)
                {
                    ownerPosition.Z += 0.1;
                    
                    this.Owner.Transform.WorldTranslation = ownerPosition;
                }
            }
            
        }
        
        
        
    }
}
