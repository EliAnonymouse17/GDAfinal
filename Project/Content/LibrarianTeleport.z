class LibrarianTeleport : ZilchComponent
{
    
    var TeleportRuneArray : Array[Cog] = Array[Cog]();
    
    [Property]
    var TeleportAnimation : SpriteSource = null;
    
    [Property]
    var TeleportDelay : Real = 10;
    
    var TeleportTimer : Real = 4;
    
    var RandomRollBool : Boolean = false;
    
    var RandomNumber : Integer = 1;
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var teleportRunes = this.Space.FindAllObjectsByName("TeleportRune");
        
        
        // check to see if all teleport runes are already in the array
        if(this.TeleportRuneArray.Count != 5)
        {
            // add the teleport runes to the teleportrunearay
            foreach (var rune in teleportRunes)
            {
                this.TeleportRuneArray.Add(rune);
                
            }
        }
        this.TeleportTimer -= event.Dt;
        
        if(this.TeleportTimer <= 1)
        {
            var randomGenerator : Random = Random();
            // get our random number
            
            var dieRoll = randomGenerator.DieRoll(5);
            
            // we only want to change 1 rune's spritesource to the animation so we want to store the first one that isn't the same position
            if(!this.RandomRollBool)
            {
                this.RandomNumber = dieRoll;
            }
            
            
            // make variables so we don't need to type as much
            var runePosition = this.TeleportRuneArray[this.RandomNumber - 1].Transform.WorldTranslation;
            var ownerPosition = this.Owner.Transform.WorldTranslation;
            
            if(ownerPosition.X != runePosition.X)
            {
                this.RandomRollBool = true;
                // ease of access variable
                var rune = this.TeleportRuneArray[this.RandomNumber - 1];
                // set rune sprite to animation
                rune.Sprite.SpriteSource = rune.TeleportRuneAnimations.RuneAnimation;
                
                
                
                if(this.TeleportTimer <= 0)
                {
                    ownerPosition = runePosition;
                    
                    // set position
                    this.Owner.Transform.WorldTranslation = ownerPosition;
                    // set rune sprite to still texture
                    rune.Sprite.SpriteSource = rune.TeleportRuneAnimations.StillTexture;
                    
                    this.RandomRollBool = false;
                    
                    // reset timer
                    this.TeleportTimer = this.TeleportDelay;
                    
                    if(ownerPosition.Z == runePosition.Z)
                    {
                        ownerPosition.Z += 0.1;
                        
                        this.Owner.Transform.WorldTranslation = ownerPosition;
                    }
                }
            }
        }
    }
}
