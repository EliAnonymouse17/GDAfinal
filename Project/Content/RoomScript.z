enum EnemyTypeID {SKELETON, ZOMBIE, NECROMANCER}

enum Directions {UP, DOWN, RIGHT, LEFT}

enum ItemID {HEALTH, BLOCKADE}

class Enemy
{
    var Position : Real3;
    var Sprite : SpriteSource;
    var ShotType : ShotPatternID;
    var AIScript1 : String;
    var AIScript2 : String;
    constructor(enemyType : EnemyTypeID, position : Real3)
    {
        this.Position = position;
        if(enemyType == EnemyTypeID.SKELETON)
        {
            this.Sprite = SpriteSource.Texture_SkeletonStill;
            this.ShotType = ShotPatternID.SINGLE;
            this.AIScript1 = "SideToSide";
            this.AIScript2 = "Empty";
        }
    }
}

class Item
{
    var Position : Real3;
    var Sprite : SpriteSource;
    var ItemScript1 : String;
    var ItemScript2 : String;
    constructor(itemID : ItemID, position : Real3)
    {
        this.Position = position;
        if(itemID == ItemID.BLOCKADE)
        {
            this.Sprite = SpriteSource.Square;
            this.ItemScript1 = "RigidBody";
            this.ItemScript2 = "BoxCollider";
        }
        else if(itemID == ItemID.HEALTH)
        {
            this.Sprite = SpriteSource.HeartTexture_000;
            this.ItemScript1 = "HeartPickupScript";
            this.ItemScript2 = "BoxCollider";
        }
    }
}

class Room
{
    var Enemies : Array[Enemy];
    var Items : Array[Item];
    var TM : Archetype;
    
    constructor(enemies : Array[Enemy], items : Array[Item], tileMap : Archetype)
    {
        this.Enemies = new Array[Enemy](enemies.Count);
        for(var i = 0; i < this.Enemies.Count; ++i)
        {
            this.Enemies[i] = enemies[i];
        }
        this.Items = new Array[Item](items.Count);
        for(var i = 0; i < this.Items.Count; ++i)
        {
            this.Items[i] = items[i];
        }
        
        this.TM = tileMap;
    }
    
    
    function InitRoom(space : Space)
    {
        for(var i = 0; i < this.Enemies.Count; ++i)
        {
            var currentEnemy = space.CreateAtPosition(Archetype.Enemy, this.Enemies[i].Position);
            currentEnemy.AddComponentByName(this.Enemies[i].AIScript1);
            currentEnemy.AddComponentByName(this.Enemies[i].AIScript2);
            currentEnemy.Sprite.SpriteSource = this.Enemies[i].Sprite;
            currentEnemy.EnemyShoot.ShotPattern = this.Enemies[i].ShotType;
        }
        
        for(var i = 0; i < this.Items.Count; ++i)
        {
            var currentItem = space.CreateAtPosition(Archetype.Item, this.Items[i].Position);
            currentItem.AddComponentByName(this.Items[i].ItemScript1);
            currentItem.AddComponentByName(this.Items[i].ItemScript2);
            currentItem.Sprite.SpriteSource = this.Items[i].Sprite;
        }
        
        space.CreateAtPosition(this.TM, Real3(0, 0, 0));
    }
}

class RoomScript : ZilchComponent
{
    var CurrentEnemyList : Array[Enemy];
    var CurrentItemList : Array[Item];
    var CurrentRoom : Room;
    var Map : Array[Array[Room]];
    var MapPosition : Integer2;
    var MapDimensions : Integer = 3;
    var Minimap : Minimap;
    
    function Initialize(init : CogInitializer)
    {
        this.Minimap = this.Space.FindObjectByName("Minimap").Minimap;
        this.Map = this.InitMap();
        this.MapPosition = Integer2(0, 0);
        this.CurrentEnemyList = new Array[Enemy]();
        this.CurrentEnemyList.Add(new Enemy(EnemyTypeID.SKELETON, Real3(-7, 7.5, 0)));
        this.CurrentItemList = new Array[Item]();
        this.CurrentItemList.Add(new Item(ItemID.BLOCKADE, Real3(7, 7.5, 0)));
        this.CurrentRoom = new Room(this.CurrentEnemyList, this.CurrentItemList, Archetype.TMSquare22);
        Zero.Connect(this.Space, Events.EnemyDeathEvent, this.OnEnemyDeath);
    }
    
    function InitMap() : Array[Array[Room]]
    {
        var map = new Array[Array[Room]]();
        for(var i = 0; i < this.MapDimensions; ++i)
        {
            map.Add(new Array[Room]());
            for(var j = 0; j < this.MapDimensions; ++j)
            {
                var enemyList = new Array[Enemy]();
                for(var k = 0; k < i+j+1; ++k)
                {
                    enemyList.Add(new Enemy(EnemyTypeID.SKELETON, Real3(-8+(3*k), 7.5, 0)));
                }
                map[i].Add(new Room(enemyList, new Array[Item](), Archetype.TMChip));
            }
        }
        return map;
    }

    function OnEnemyDeath(event : ZilchEvent)
    {
        var enemyCheck = 0;
        foreach (var enemy in this.Space.FindAllObjectsByName("Enemy"))
        {
            if(enemyCheck > 0)
            {
                return;
            }
            enemyCheck += 1;
        }
        foreach(var door in this.Space.FindAllObjectsByName("Door"))
        {
            var posCheck = this.MapPosition;
            if(door.Door.Direction == Directions.RIGHT)
            {
                posCheck += Integer2(1, 0);
            }
            else if(door.Door.Direction == Directions.LEFT)
            {
                posCheck += Integer2(-1, 0);
            }
            else if(door.Door.Direction == Directions.UP)
            {
                posCheck += Integer2(0, -1);
            }
            else if(door.Door.Direction == Directions.DOWN)
            {
                posCheck += Integer2(0, 1);
            }
            if(posCheck.X < this.MapDimensions && posCheck.X >  -1 && posCheck.Y < this.MapDimensions && posCheck.Y > -1)
            {
                door.Door.SetActive(true);
                if(this.Minimap.GetNodeState(posCheck) == MMNodeState.Unknown)
                    this.Minimap.SetNodeState(posCheck, MMNodeState.Unexplored);
            }
        }
    }
    
    function NextRoom(direction : Directions)
    {
        this.Map[this.MapPosition.X][this.MapPosition.Y] = new Room(new Array[Enemy](), new Array[Item](), this.CurrentRoom.TM);
        this.Minimap.SetNodeState(this.MapPosition, MMNodeState.Complete);
        if(direction == Directions.RIGHT)
        {
            this.MapPosition += Integer2(1, 0);
        }
        else if(direction == Directions.LEFT)
        {
            this.MapPosition += Integer2(-1, 0);
        }
        else if(direction == Directions.UP)
        {
            this.MapPosition += Integer2(0, -1);
        }
        else if(direction == Directions.DOWN)
        {
            this.MapPosition += Integer2(0, 1);
        }
        this.CurrentRoom = this.Map[this.MapPosition.X as Integer][this.MapPosition.Y as Integer];
        this.Minimap.SetNodeState(this.MapPosition, MMNodeState.Current);
        this.CurrentRoom.InitRoom(this.Space);
        this.Space.FindObjectByName("Player").Transform.Translation = Real3(0, 0, 0);
        foreach(var door in this.Space.FindAllObjectsByName("Door"))
        {
            door.Door.SetActive(false);
        }
        if(this.CurrentRoom.Enemies.Count == 0)
        {
            this.OnEnemyDeath(ZilchEvent());
        }
    }
}
