class AIMoveFromPlayer : ZilchComponent
{
    [Property]
    var MoveSpeed : Real = 4;
    
    [Property]
    var MovesAwayFromPlayer : Boolean = false;
    
    [Property]
    var ActiveTimer : Real = 0;
    
    var TetherObject : Cog = null;
    
    [Property]
    var TetherObjectBool : Boolean = false;
    
    [Property]
    var MaxTetherDistance : Real = 10;
    
    var Active : Boolean = false;
    var TetherBool : Boolean = false;
    var TetherTimer : Real = 1;
    
    var Player : Cog;
    var MoveFreeze : Boolean = false;
    var FreezeTimer : Real = 0;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.Player = this.Space.FindObjectByName("Player");
        if(this.TetherObjectBool)
        {
            this.TetherObject = this.Space.FindObjectByName("Tether");
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Space.FindObjectByName("Room").RoomScript.AttackDelay > 0)
        {
            return;
        }
        
        if(!this.Active)
        {
            this.ActiveTimer -= event.Dt;
        }
        
        if(this.ActiveTimer <= 0)
        {
            this.Active = true;
        }
        
        
        if(this.TetherBool)
        {
            this.TetherTimer -= event.Dt;
        }
        
        if(this.TetherTimer <= 0)
        {
            this.TetherTimer = 1;
            this.TetherBool = false;
        }
        
        
        
        
        
        if(this.TetherObject != null)
        {
            var dir = this.TetherObject.Transform.Translation - this.Owner.Transform.Translation;
            var currDistance = Math.Length(dir);
            dir = Math.Normalize(dir);
            
            if(currDistance > this.MaxTetherDistance)
            {
                this.TetherBool = true;
            }
        }
        
        
        if(!this.Active)
        {
            return;
        }
        
        var playerPos : Real3 = Real3(0,0,0);
        var randGen : Random = Random();
        var randomAngle = Real3(randGen.Range(-0.2, 0.2), randGen.Range(-0.2, 0.2), 0);
        var angle : Real3 = Real3(0,0,0);
        if (this.Player != null)
        {
            playerPos = this.Player.Transform.Translation;
        }
        if (this.MovesAwayFromPlayer && !this.TetherBool)
        {
            angle = Math.Normalize(this.Owner.Transform.Translation - playerPos);
        }
        else if (!this.MovesAwayFromPlayer && !this.TetherBool)
        {
            angle = Math.Normalize(playerPos - this.Owner.Transform.Translation);
        }
        else
        {
            angle = Math.Normalize(this.TetherObject.Transform.Translation - this.Owner.Transform.Translation);
        }
        if (this.MoveFreeze == false)
        {
            this.Owner.RigidBody.Velocity = (angle+randomAngle) * this.MoveSpeed;
        }
        this.FreezeTimer -= event.Dt;
        if (this.FreezeTimer <= 0)
        {
            this.MoveFreeze = false;
        }
    }
}
