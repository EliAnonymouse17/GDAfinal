class ExplodingBulletScript : ZilchComponent
{
    
    var RainbowShotBoolean : Boolean = false;
    
    [Property] 
    var AngleOffset : Real = 90;
    
    [Property]
    var ArchetypeToSpawn : Archetype = null;
    
    [Property]
    var SpawnedBulletVelocity : Real = 25;
    
    [Property]
    var NumBullets : Integer = 14;
    
    [Property]
    var BoomSound : SoundCue = SoundCue.ExplodingBulletImpact;
    
    [Property]
    var DestroyOwner : Boolean = true;
    
    var HasCollided : Boolean = false;
    
    var BulletOrientation : Real = 0;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    function SpawnBullets()
    {
        
        if(this.Owner.ArchetypeName == "RainbowShot")
        {
            if(this.RainbowShotBoolean == false)
            {
                return;
            }
        }
        this.BulletOrientation = this.Owner.Transform.EulerAngles.Z;
        var currentAngle = this.BulletOrientation;

        if (this.NumBullets == 1)
        {
            currentAngle -= Math.ToRadians(90);
            var bullet = this.Space.CreateAtPosition(this.ArchetypeToSpawn, this.Owner.Transform.Translation);
            var fireDir = Real3(Math.Cos(currentAngle), Math.Sin(currentAngle), 0);
            var rotationAngle = Math.ATan2(fireDir.Y, fireDir.X);
            bullet.RigidBody.ApplyForce(fireDir * this.SpawnedBulletVelocity);
            bullet.Transform.SetEulerAnglesXYZ(0, 0, rotationAngle - 3.14/2);
            
        }
        if (this.NumBullets != 0 && this.NumBullets != 1)
        {
            var angleStep = (Math.Pi * 2) / this.NumBullets;
            
            for(var i = 0; i < this.NumBullets; ++i)
            {
                
                
                var bullet = this.Space.CreateAtPosition(this.ArchetypeToSpawn, this.Owner.Transform.Translation);
                var fireDir = Real3(Math.Cos(currentAngle), Math.Sin(currentAngle), 0);
                var rotationAngle = Math.ATan2(fireDir.Y, fireDir.X);
                bullet.RigidBody.ApplyForce(fireDir * this.SpawnedBulletVelocity);
                
                bullet.Transform.SetEulerAnglesXYZ(0, 0, rotationAngle - 3.14/2);
                
                currentAngle += angleStep;
            }
            
            
            if(!this.HasCollided)
            {
                this.HasCollided = true;
            }
        }
        
        if (this.BoomSound != null)
        {
            this.Space.SoundSpace.PlayCue(this.BoomSound);
        }
        if(this.DestroyOwner)
        {
            this.Owner.Destroy();
        }
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        if(this.HasCollided)
        {
            return;
        }
        
        this.SpawnBullets();
        
    }
}
