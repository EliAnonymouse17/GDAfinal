/* ----------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** PlayerShoot.z
**
** Author:
** - Eli
**
** Contributors:
** - Nelson, Bar
** --------------------------------------------------------------------------*/
//      10        20        30        40        50        60        70        80        90       100
enum ShotPatternID {SINGLE, SPREAD, RING}

class PlayerShoot : ZilchComponent
{
    [Property]
    var SpellType : SpellTypes = SpellTypes.NULL;
    
    var Active : Boolean
    {
        get
        {
            if(this.Owner.SpellSwitchHandler == null) return false;
            
            return this.Owner.SpellSwitchHandler.CurrentSpell == this.SpellType;
        }
        set
        {
            if(this.Owner.SpellSwitchHandler == null) return;
            
            this.Owner.SpellSwitchHandler.CurrentSpell = this.SpellType;
        }
    }
    [Property] var UnlockAtStart : Boolean = false;
    [Property] var SpellName : String = "Magic Missile";
    [Property] var BulletSprite : SpriteSource = SpriteSource.Texture_MagicMissle;
    [Property] var SpreadBullets : Integer = 3;
    [Property] var RingCount : Integer = 10;
    [Property] var BulletType : Archetype = Archetype.Bullet;
    [Property] var BulletDelay : Real = 1; // Time bewteen bursts
    [Property] var BulletSpeed : Real = 1000;
    [Property] var ShotPattern : ShotPatternID = ShotPatternID.SINGLE;
    [Property] var ShootSound : SoundCue = null;
    [Property] var TimerFreeze : Boolean = false;
    
    
    // A burst is a series of consecutive shots
    [Property] var BurstDelay : Real = 0; // Time between shots within a burst
    var BurstTimer : Real = 0;
    [Property] var BurstCount : Integer = 1;
    var ShotsLeft : Integer = 0;
    


    var IsBursting : Boolean = false;
    var TimeUntilNextShot : Real = 0;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        if(this.Owner.SpellSwitchHandler != null && this.UnlockAtStart)
        {
            this.Owner.SpellSwitchHandler.UnlockSpell(this.SpellType, false);
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(!this.Active) return;
        

        // Tick down time until next burst
        if (this.TimerFreeze == false && this.IsBursting == false)
        {
            this.TimeUntilNextShot -= event.Dt;
        }
        // Calculate shot angle
        var mouseScreenPosition = Zero.Mouse.ScreenPosition;
        var mouseWorldPosition = this.LevelSettings.CameraViewport.ScreenToWorldZPlane(mouseScreenPosition, 0);
        var shotAngle = Math.Normalize(mouseWorldPosition - this.Owner.Transform.Translation);
        
        
        
        // Start a new burst
        if(Zero.Mouse.IsButtonDown(MouseButtons.Left) && this.TimeUntilNextShot <= 0 && this.IsBursting == false)
        {
            this.Owner.Shoot.SpreadBullets = this.SpreadBullets;
            this.Owner.Shoot.RingCount = this.RingCount;
            this.Owner.Shoot.BulletType = this.BulletType;
            this.TimeUntilNextShot = this.BulletDelay;
            this.BurstTimer = 0;
            this.ShotsLeft = this.BurstCount;
            this.IsBursting = true;
        }
        
        // Tick down time left bewtween shots
        if (this.IsBursting)
        {
            this.BurstTimer -= event.Dt;
        }
        
        // Fire Shot
        if (this.BurstTimer <= 0 && this.ShotsLeft > 0)
        {
            this.Owner.Shoot.Shoot(this.BulletSpeed, shotAngle, this.ShotPattern);
            if (this.ShootSound != null)
            {
                this.Space.SoundSpace.PlayCue(this.ShootSound);
            }
            this.BurstTimer = this.BurstDelay;
            this.ShotsLeft -= 1;
        }
        
        // End burst
        if (this.ShotsLeft <= 0 && this.IsBursting)
        {
            this.IsBursting = false;
        }
    }
}
