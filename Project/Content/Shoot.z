/* ----------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** Shoot.z
**
** Author:
** - Eli
**
** Contributors:
** - Nelson
** --------------------------------------------------------------------------*/
//      10        20        30        40        50        60        70        80        90       100
class Shoot : ZilchComponent
{
    [Property]
    var BulletType : Archetype = Archetype.Bullet;
    
    [Property]
    var RingCount : Integer = 10;
    
    [Property]
    var RingOffset : Real = 90;
    
    [Property]
    var SpreadBullets : Integer = 3;
    
    function Shoot(bulletSpeed : Real, angle : Real3, shotPattern : ShotPatternID)
    {
        if(this.Space.FindObjectByName("Room").RoomScript.AttackDelay > 0)
            return;
        if(shotPattern == ShotPatternID.SINGLE)
        {
            var bulletPos = this.Owner.Transform.Translation + angle;
            var bullet = this.Space.CreateAtPosition(this.BulletType, bulletPos);
            var rotationAngle = Math.ATan2(angle.Y, angle.X);
            if(this.BulletType != null)
            {
                bullet.RigidBody.ApplyForce(angle * bulletSpeed);
                
                bullet.Transform.SetEulerAnglesXYZ(0, 0, rotationAngle - 3.14/2);
            }
        }
        if(shotPattern == ShotPatternID.SPREAD)
        {
            for(var i : Real = 0; i < this.SpreadBullets; ++i)
            {
                var radAngle = Math.ATan2(angle.X, angle.Y) - (i-(this.SpreadBullets/2))*(Math.Pi/(this.SpreadBullets*2)); //atan2 returns a radian -pi to pi for any normalized vector.
                var newAngle = Real3(Math.Sin(radAngle), Math.Cos(radAngle), 0);
                var rotationAngle = Math.ATan2(newAngle.Y, newAngle.X);
                var bulletPos = this.Owner.Transform.Translation + newAngle;
                var bullet = this.Space.CreateAtPosition(this.BulletType, bulletPos);
                bullet.RigidBody.ApplyForce(newAngle * bulletSpeed);
                
                bullet.Transform.SetEulerAnglesXYZ(0, 0, rotationAngle - 3.14/2);
            }
        }
        
        if(shotPattern == ShotPatternID.RING)
        {
            var currentAngle = Math.ToRadians(this.RingOffset);
            var angleStep = (Math.Pi * 2) / this.RingCount;
            
            for(var i = 0; i < this.RingCount; ++i)
            {
                var bullet = this.Space.CreateAtPosition(this.BulletType, this.Owner.Transform.Translation);
                var fireDir = Real3(Math.Cos(currentAngle), Math.Sin(currentAngle), 0);
                var rotationAngle = Math.ATan2(fireDir.Y, fireDir.X);
                bullet.RigidBody.ApplyForce(fireDir * bulletSpeed);
                
                bullet.Transform.SetEulerAnglesXYZ(0, 0, rotationAngle - 3.14/2);
                
                currentAngle += angleStep;
            }
        }
    }
}