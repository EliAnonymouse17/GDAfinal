/* ----------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** Shoot.z
**
** Author:
** - Eli
**
** Contributors:
** - Nelson
** --------------------------------------------------------------------------*/
//      10        20        30        40        50        60        70        80        90       100
class Shoot : ZilchComponent
{
    [Property]
    var BulletType : Archetype = Archetype.Bullet;
    
    [Property]
    var RingCount : Integer = 10;
    
    [Property]
    var RingOffset : Real = 90;
    
    function Shoot(bulletSpeed : Real, angle : Real3, shotPattern : ShotPatternID)
    {
        if(shotPattern == ShotPatternID.SINGLE)
        {
            var bulletPos = this.Owner.Transform.Translation + angle;
            var bullet = this.Space.CreateAtPosition(this.BulletType, bulletPos);
            bullet.RigidBody.ApplyForce(angle * bulletSpeed);
        }
        if(shotPattern == ShotPatternID.TRIPLE)
        {
            for(var i : Real = 0; i < 3; ++i)
            {
                var radAngle = Math.ATan2(angle.X, angle.Y) - (i-1)*(Math.Pi/6); //atan2 returns a radian -pi to pi for any normalized vector.
                var newAngle = Real3(Math.Sin(radAngle), Math.Cos(radAngle), 0);
                var bulletPos = this.Owner.Transform.Translation + newAngle;
                var bullet = this.Space.CreateAtPosition(this.BulletType, bulletPos);
                bullet.RigidBody.ApplyForce(newAngle * bulletSpeed);
            }
        }
        
        if(shotPattern == ShotPatternID.RING)
        {
            var ringAngle : Real = 0;
            for (var i = 0; i < this.RingCount; ++i)
            {
                ringAngle = Math.ATan2(0,0) - (i-1)*(Math.ToRadians(360 / this.RingCount));
                var bullet = this.Space.CreateAtPosition(this.BulletType, this.Owner.Transform.Translation);
                var newAngle = Real3(Math.Sin(ringAngle), Math.Cos(ringAngle), 0);
                newAngle = Math.Normalize(newAngle);
                bullet.RigidBody.ApplyForce(newAngle * bulletSpeed);
                
                // calculate the angle of the firing vector in radians, apply angle offset
                //var fireAngle = Math.ATan2(newAngle.Y, newAngle.X) - Math.ToRadians(this.RingOffset);
                
                // set the z rotation for this bullet
                //bullet.Transform.SetEulerAnglesXYZ(0, 0, fireAngle);
            }
        }
    }
}