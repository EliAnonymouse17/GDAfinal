/* ----------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** HitpointScript.z
**
** Author:
** - Bar Ben-zvi
**
** Contributors:
** - Eli, Nelson
** --------------------------------------------------------------------------*/

class HitpointScript : ZilchComponent
{
    sends EnemyDeathEvent : Event;
    [Property]
    var PrivateHP : Integer = 5;
    
    [Property]
    var MaxHP : Integer = 5;
    
    [Property]
    var MaxHPBoolean : Boolean = false;
    
    [Property]
    var HurtSound : SoundCue = null;
    
    [Property]
    var DeathSound : SoundCue = null;
    
    [Property]
    var HurtDuration : Real = 0.1;
    
    var HurtTimer : Real = 0.1;
    
    var HurtBool : Boolean = false;
    
    var Dead : Boolean = false;
    
    var SpellDropBool : Boolean = false;
    
    [Property]
    var SpawnOnDeath : Archetype = null;
    
    [Property]
    var SpawnCount : Integer = 1;
    
    [Property]
    var HealthDropBoolean : Boolean = false;
    
    [Property]
    var HealthDropChance : Integer = 6;
    
    var DidSpawn : Boolean = false;
    
    var FlamingTimer : Real = 0;
    
    var TimeUntilFlameDamage : Real = 0;
    
    [Property]
    var FlameImmune : Boolean = false;
    
    var RandomGenerator : Random = Random();
    
    //Manipulates HP by accessing through other scripts
    var HP : Integer
    {
        get
        {
            return this.PrivateHP;
        }
        
        set
        {
            if (this.PrivateHP > value && value > 0)
            {
                this.Space.SoundSpace.PlayCue(this.HurtSound);
                this.HurtTimer = this.HurtDuration;
                this.Owner.Sprite.Color = Real4(1,0,0,1);
            }
            this.PrivateHP = value;
            if(this.PrivateHP <= 0)
            {
                if(this.Owner.Name == "Enemy")
                {
                    if(this.HealthDropBoolean)
                    {
                        var healthRoll = this.RandomGenerator.DieRoll(this.HealthDropChance);
                        
                        if(healthRoll == this.HealthDropChance)
                        {
                            this.Space.CreateAtPosition(Archetype.HeartPickup, this.Owner.Transform.WorldTranslation);
                        }
                    }
                    if(this.Owner.SpellDrop != null && !this.SpellDropBool)
                    {
                        this.Owner.SpellDrop.SpellDrop();
                        
                        this.SpellDropBool = true;
                        if(this.Owner.ArchetypeName == "TheLibrarian")
                        {
                            if (this.Space.FindObjectByName("Runes") != null)
                            {
                                this.Space.FindObjectByName("Runes").Destroy();
                            }
                        }
                    }
                    if(this.Owner.BossHealthBarScript != null)
                    {
                        this.Space.FindObjectByName("BossHealthBarEmpty").Sprite.Visible = false;
                    }
                    if(!this.Dead)
                    {
                        this.Dead = true;
                        this.Space.DispatchEvent(Events.EnemyDeathEvent, ZilchEvent());
                    }
                    if(!this.DidSpawn && this.SpawnOnDeath != null)
                    {
                        var position = this.Owner.Transform.WorldTranslation;
                        this.DidSpawn = true;
                        for (var i = 0; i < this.SpawnCount; ++i)
                        {
                            this.Space.CreateAtPosition(this.SpawnOnDeath, position + Real3(i,0,0));
                        }
                    }
                }
                //Special cases that trigger events on destruction
                if(this.Owner.ChangeLevelOnDeath != null)
                {
                    this.Space.DestroyAllFromLevel();
                    this.Space.LoadLevel(this.Owner.ChangeLevelOnDeath.LevelToLoad);
                }
                this.Space.SoundSpace.PlayCue(this.DeathSound);
                this.Owner.Destroy();
            }
            
        }
    }
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        if(this.Owner.Name == "Player" && this.PrivateHP > this.MaxHP)
        {
            this.PrivateHP = this.MaxHP;
        }
        if(this.MaxHPBoolean && this.PrivateHP > this.MaxHP)
        {
            this.PrivateHP = this.MaxHP;
        }
        if(this.HurtTimer >= 0 && this.HurtBool == true)
        {
            this.Owner.Sprite.Color = Real4(1,0,0,0.9);
            
            this.HurtTimer -= event.Dt;
        }
        
        if(this.HurtTimer <= 0 && this.HurtBool == true)
        {
            this.Owner.Sprite.Color = Real4(1,1,1,1);
            
            this.HurtTimer = this.HurtDuration;
            
            this.HurtBool = false;
        }
        if(this.FlamingTimer != 0)
        {
            if(this.FlameImmune)
                this.FlamingTimer = 0;
            else
            {
                this.TimeUntilFlameDamage -= event.Dt;
                if(this.TimeUntilFlameDamage <= 0)
                {
                    this.HP -= 1;
                    this.TimeUntilFlameDamage = 1;
                    this.FlamingTimer -= 1;
                }
            }
        }
    }
}
