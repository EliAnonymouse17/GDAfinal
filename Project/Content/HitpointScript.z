/* ----------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** HitpointScript.z
**
** Author:
** - Bar Ben-zvi
**
** Contributors:
** - Eli, Nelson
** --------------------------------------------------------------------------*/

class HitpointScript : ZilchComponent
{
    sends EnemyDeathEvent : Event;
    [Property]
    var PrivateHP : Integer = 5;
    
    [Property]
    var MaxHP : Integer = 5;
    
    [Property]
    var HurtSound : SoundCue = null;
    
    [Property]
    var DeathSound : SoundCue = null;
    
    [Property]
    var HurtDuration : Real = 0.1;
    
    var HurtTimer : Real = 0.1;
    
    var HurtBool : Boolean = false;
    
    var Dead : Boolean = false;
    
    var SpellDropBool : Boolean = false;
    
    //Manipulates HP by accessing through other scripts
    var HP : Integer
    {
        get
        {
            return this.PrivateHP;
        }
        
        set
        {
            if (this.PrivateHP > value && value > 0)
            {
                this.Space.SoundSpace.PlayCue(this.HurtSound);
                this.HurtTimer = this.HurtDuration;
                this.Owner.Sprite.Color = Real4(1,0,0,1);
            }
            this.PrivateHP = value;
            if(this.PrivateHP <= 0)
            {
                if(this.Owner.Name == "Enemy")
                {
                    if(this.Owner.SpellDrop != null && !this.SpellDropBool)
                    {
                        this.Owner.SpellDrop.SpellDrop();
                        
                        this.SpellDropBool = true;
                    }
                    if(!this.Dead)
                    {
                        this.Dead = true;
                        this.Space.DispatchEvent(Events.EnemyDeathEvent, ZilchEvent());
                    }
                }
                //Special cases that trigger events on destruction
                if (this.Owner.ArchetypeName == "AnimatedGolem")
                {
                    this.Space.CreateAtPosition(Archetype.MiniGolem, this.Owner.Transform.Translation - Real3(1,1,0));
                    this.Space.CreateAtPosition(Archetype.MiniGolem, this.Owner.Transform.Translation - Real3(-1,-1,0));
                }
                this.Space.SoundSpace.PlayCue(this.DeathSound);
                this.Owner.Destroy();
            }
            if(this.Owner.Name == "Player" && this.PrivateHP > this.MaxHP)
            {
                this.PrivateHP = this.MaxHP;
            }
        }
    }
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        if(this.HurtTimer >= 0 && this.HurtBool == true)
        {
            this.Owner.Sprite.Color = Real4(1,0,0,0.9);
            
            this.HurtTimer -= event.Dt;
        }
        
        if(this.HurtTimer <= 0 && this.HurtBool == true)
        {
            this.Owner.Sprite.Color = Real4(1,1,1,1);
            
            this.HurtTimer = this.HurtDuration;
            
            this.HurtBool = false;
        }
    }
}
