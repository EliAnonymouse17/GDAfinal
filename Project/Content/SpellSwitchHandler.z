/* --------------------------------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** PlayerFade.z
**
** Author:
** - Nelson Athow
**
** Contributors:
** - Bar Ben-zvi
**
** Description:
** Changes player collision group to a collision group that only interacts with default.
** Changes back to normal collision after timer is up.
** --------------------------------------------------------------------------*/
//      10        20        30        40        50        60        70        80        90       100

class NullPlayerShoot : PlayerShoot{}
class BasicPlayerShoot : PlayerShoot{}
class BubbleTrapPlayerShoot : PlayerShoot{}
class ExplodingBulletPlayerShoot : PlayerShoot{}
class IceSpearPlayerShoot : PlayerShoot{}
class SeekingArrowPlayerShoot : PlayerShoot{}
class WaterStreamPlayerShoot : PlayerShoot{}
class BoneShotPlayerShoot : PlayerShoot{}
class AcidPoolPlayerShoot : PlayerShoot{}

enum SpellTypes 
    {
    NULL, 
    BASIC, 
    BUBBLETRAP, 
    EXPLODINGBULLET, 
    ICESPEAR, 
    SEEKINGARROW, 
    WATERSTREAM, 
    BONESHOT,
    ACIDPOOL,
    END
    }
    
    
    
class SpellSwitchHandler : ZilchComponent
{
    var CurrentPlayerShoot : PlayerShoot
    {
        get
        {
            if(this.CurrentSpell == SpellTypes.NULL)
            {
                return this.Owner.NullPlayerShoot;
            }
            else if(this.CurrentSpell == SpellTypes.BASIC)
            {
                return this.Owner.BasicPlayerShoot;
            }
            else if(this.CurrentSpell == SpellTypes.BUBBLETRAP)
            {
                return this.Owner.BubbleTrapPlayerShoot;
            }
            else if(this.CurrentSpell == SpellTypes.EXPLODINGBULLET)
            {
                return this.Owner.ExplodingBulletPlayerShoot;
            }
            else if(this.CurrentSpell == SpellTypes.ICESPEAR)
            {
                return this.Owner.IceSpearPlayerShoot;
            }
            else if(this.CurrentSpell == SpellTypes.SEEKINGARROW)
            {
                return this.Owner.SeekingArrowPlayerShoot;
            }
            else if(this.CurrentSpell == SpellTypes.WATERSTREAM)
            {
                return this.Owner.WaterStreamPlayerShoot;
            }
            else if (this.CurrentSpell == SpellTypes.BONESHOT)
            {
                return this.Owner.BoneShotPlayerShoot;
            }
            else if (this.CurrentSpell == SpellTypes.ACIDPOOL)
            {
                return this.Owner.AcidPoolPlayerShoot;
            }
            else
            {
                return this.Owner.BoneShotPlayerShoot;
            }
            
        }
        set
        {
            
        }
    }
    var SpellArray : Array[SpellTypes] = Array[SpellTypes]();
    var CurrentSpell : SpellTypes
    {
        get
        {
            return this.SpellArray[this.SpellIndex];
        }
        set
        {
            var index = this.SpellArray.FindFirstIndex(value);
            if(index >= 0)
            {
                this.SpellIndex = index;
            }
        }
    }
    var PrivateSpellIndex : Integer = 0;
    var SpellIndex : Integer
    {
        get {return this.PrivateSpellIndex;}
        set 
        {
            if(value > this.SpellArray.Count - 1)
            {
                this.PrivateSpellIndex = 0;
            }
            else if (value < 0)
            {
                this.PrivateSpellIndex = this.SpellArray.Count - 1;
            }
            else 
            {
                this.PrivateSpellIndex = value;
            }
        }
    }
    [Property] 
    var DebugUnlockAll : Boolean = false;
    
    
    
    // Sets all data for the Spell
    /*function SetSpell(bulletSpeed : Real, bulletDelay : Real, spreadCount : Integer, ringCount : Integer,
     bulletType : Archetype, shotPattern : ShotPatternID, burstDelay : Real, burstCount : Integer)
    {
        this.Owner.PlayerShoot.BulletSpeed = bulletSpeed;
        this.Owner.PlayerShoot.BulletDelay = bulletDelay;
        this.Owner.PlayerShoot.ShotPattern = shotPattern;
        this.Owner.PlayerShoot.TimeUntilNextShot = 0.5;
        
        this.Owner.PlayerShoot.BurstCount = burstCount;
        this.Owner.PlayerShoot.BurstDelay = burstDelay;
        
        this.Owner.Shoot.BulletType = bulletType;
        this.Owner.Shoot.RingCount = ringCount;
        this.Owner.Shoot.SpreadBullets = spreadCount;
    }*/
    
    // Sets hud representation of spell
    function RefreshSpellHUD()
    {
        var childCamera = this.Owner.FindChildByName("Camera");
        
        if(childCamera != null)
        {
            childCamera.FindChildByName("SpellHUD").FindChildByName("SpellIcon").Sprite.SpriteSource = this.CurrentPlayerShoot.BulletSprite;
            childCamera.FindChildByName("SpellHUD").FindChildByName("SpellName").SpriteText.Text = this.CurrentPlayerShoot.SpellName;
        }
        
    }
    /*function ChangeSpell()
    {
        // Implementation of How spells work
        this.CurrentSpell = this.SpellArray.Get(this.PrivateSpellIndex);
        if(this.CurrentSpell == SpellTypes.BASIC)
        {
            this.SetSpell(120, 0.7, 1, 1, Archetype.Bullet, ShotPatternID.SINGLE, 0, 1);
            this.SetSpellHUD(SpriteSource.Texture_PlayerBasicProjectile, "Magic Missile", SoundCue.MagicMissile);
        }
        else if(this.CurrentSpell == SpellTypes.BUBBLETRAP)
        {
            this.SetSpell(200, 1, 1, 1, Archetype.BubbleBullet, ShotPatternID.SINGLE, 0, 1);
            this.SetSpellHUD(SpriteSource.Texture_BubbleBullet, "Bubble Trap", SoundCue.Audio_BubbleTrap);
        }
        else if(this.CurrentSpell == SpellTypes.EXPLODINGBULLET)
        {
            this.SetSpell(1200, 2, 1, 1, Archetype.ExplodingBullet, ShotPatternID.SINGLE, 0, 1);
            this.SetSpellHUD(SpriteSource.Texture_SpikeBall, "Exploding Shrapnel", SoundCue.ExplodingBulletLaunch);
        }
        else if (this.CurrentSpell == SpellTypes.ICESPEAR)
        {
            this.SetSpell(250, 2, 1, 1, Archetype.IceSpear, ShotPatternID.SINGLE, 0, 1);
            this.SetSpellHUD(SpriteSource.Texture_BigIce, "Ice Spear", SoundCue.IceSpear);
        }
        else if (this.CurrentSpell == SpellTypes.SEEKINGARROW)
        {
            this.SetSpell(250, 0.2, 1, 1, Archetype.SeekingArrow, ShotPatternID.SINGLE, 0, 1);
            this.SetSpellHUD(SpriteSource.Texture_SeekingArrow, "Seeking Arrow", SoundCue.Audio_SeekingArrow);
        }
        else if (this.CurrentSpell == SpellTypes.WATERSTREAM)
        {
            this.SetSpell(180, 1.2, 1, 1, Archetype.WaterBullet, ShotPatternID.SINGLE, 0.02, 5);
            this.SetSpellHUD(SpriteSource.Texture_Raindrop, "Water Stream", null);
        }
        else if (this.CurrentSpell == SpellTypes.BONESHOT)
        {
            this.SetSpell(1000, 6.5, 1, 1, Archetype.BoneShot, ShotPatternID.SINGLE, 0, 1);
            this.SetSpellHUD(SpriteSource.Texture_Bone, "Bone Shot", null);
        }
    }*/
    
    function UnlockSpell(spell : SpellTypes, changeTo : Boolean)
    {
        if(spell == SpellTypes.NULL)
        {
            return;
        }
        
        if(this.SpellArray.FindFirstIndex(spell) < 0)
        {
            this.SpellArray.Add(spell);
        }
        if(changeTo)
        {
            this.CurrentSpell = spell;
        }
        
    }
    
    function Initialize(init : CogInitializer)
    {
        if(this.DebugUnlockAll)
        {
            for(var i = 0; i < SpellTypes.END; ++i)
            {
                this.UnlockSpell(i as SpellTypes, false);
            }
        }
        
        this.UnlockSpell(SpellTypes.BASIC, true);
        
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyUpdate);
        Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseUpdate);
        
        this.RefreshSpellHUD();
    }

    function OnKeyUpdate(event : KeyboardEvent)
    {
        if (event.Key == Keys.Q)
        {
            this.SpellIndex += 1;
            this.RefreshSpellHUD();
        }
        else if (event.Key == Keys.E)
        {
            this.SpellIndex -= 1;
            this.RefreshSpellHUD();
        }
        
    }
    
    function OnMouseUpdate(event : MouseEvent)
    {
        if (event.Scroll.Y > 0)
        {
            this.SpellIndex += 1;
        }
        else 
        {
            this.SpellIndex -= 1;
        }
        this.RefreshSpellHUD();
        
    }
}
