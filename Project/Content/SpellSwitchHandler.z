/* --------------------------------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** PlayerFade.z
**
** Author:
** - Nelson Athow
**
** Contributors:
** - None
**
** Description:
** Changes player collision group to a collision group that only interacts with default.
** Changes back to normal collision after timer is up.
** --------------------------------------------------------------------------*/
//      10        20        30        40        50        60        70        80        90       100
enum SpellTypes {NULL, BASIC, BUBBLETRAP, EXPLODINGBULLET, ICESPEAR, SEEKINGARROW}
class SpellSwitchHandler : ZilchComponent
{
    var SpellArray : Array[SpellTypes] = Array[SpellTypes]();
    var CurrentSpell : SpellTypes = SpellTypes.BASIC;
    var PrivateSpellIndex : Integer = 0;
    var SpellIndex : Integer
    {
        get {return this.PrivateSpellIndex;}
        set 
        {
            if(value > this.SpellArray.Count - 1)
            {
                this.PrivateSpellIndex = 0;
            }
            else if (value < 0)
            {
                this.PrivateSpellIndex = this.SpellArray.Count - 1;
            }
            else 
            {
                this.PrivateSpellIndex = value;
            }
        }
    }
    
    // Sets all data for the Spell
    function SetSpell(bulletSpeed : Real, bulletDelay : Real, bulletType : Archetype, shotPattern : ShotPatternID)
    {
        this.Owner.PlayerShoot.BulletSpeed = bulletSpeed;
        this.Owner.PlayerShoot.BulletDelay = bulletDelay;
        this.Owner.PlayerShoot.ShotPattern = shotPattern;
        this.Owner.PlayerShoot.TimeUntilNextShot = 0.5;
        
        
        this.Owner.Shoot.BulletType = bulletType;
    }
    
    // Sets hud representation of spell
    function SetSpellHUD(bulletSprite : SpriteSource, spellName : String)
    {
        var childCamera = this.Owner.FindChildByName("Camera");
        
        if(childCamera != null)
        {
            childCamera.FindChildByName("SpellHUD").FindChildByName("SpellIcon").Sprite.SpriteSource = bulletSprite;
            childCamera.FindChildByName("SpellHUD").FindChildByName("SpellName").SpriteText.Text = spellName;
        }
        
    }
    function ChangeSpell()
    {
        // Implementation of How spells work
        this.CurrentSpell = this.SpellArray.Get(this.PrivateSpellIndex);
        if(this.CurrentSpell == SpellTypes.BASIC)
        {
            this.SetSpell(120, 0.5, Archetype.Bullet, ShotPatternID.SINGLE);
            this.SetSpellHUD(SpriteSource.Texture_PlayerBasicProjectile, "Magic Missile");
        }
        else if(this.CurrentSpell == SpellTypes.BUBBLETRAP)
        {
            this.SetSpell(200, 1, Archetype.BubbleBullet, ShotPatternID.SINGLE);
            this.SetSpellHUD(SpriteSource.Texture_BubbleBullet, "Bubble Trap");
        }
        else if(this.CurrentSpell == SpellTypes.EXPLODINGBULLET)
        {
            this.SetSpell(1200, 2, Archetype.ExplodingBullet, ShotPatternID.SINGLE);
            this.SetSpellHUD(SpriteSource.Texture_SpikeBall, "Exploding Shrapnel");
        }
        else if (this.CurrentSpell == SpellTypes.ICESPEAR)
        {
            this.SetSpell(100, 2, Archetype.IceSpear, ShotPatternID.SINGLE);
            this.SetSpellHUD(SpriteSource.Texture_PlayerBasicProjectile, "Ice Spear");
        }
        else if (this.CurrentSpell == SpellTypes.SEEKINGARROW)
        {
            this.SetSpell(250, 0.2, Archetype.SeekingArrow, ShotPatternID.SINGLE);
            this.SetSpellHUD(SpriteSource.Texture_SeekingArrow, "Seeking Arrow");
        }
    }
    
    function Initialize(init : CogInitializer)
    {
        //Starting Spells Go here
        this.SpellArray.Add(SpellTypes.BASIC);
        //this.SpellArray.Add(SpellTypes.BUBBLETRAP);
        //this.SpellArray.Add(SpellTypes.ICESPEAR);
        //this.SpellArray.Add(SpellTypes.SEEKINGARROW);
        //this.SpellArray.Add(SpellTypes.EXPLODINGBULLET);
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyUpdate);
        Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseUpdate);
    }

    function OnKeyUpdate(event : KeyboardEvent)
    {
        if (event.Key == Keys.Q)
        {
            this.SpellIndex += 1;
            this.ChangeSpell();
        }
        else if (event.Key == Keys.E)
        {
            this.SpellIndex -= 1;
            this.ChangeSpell();
        }
        
    }
    
    function OnMouseUpdate(event : MouseEvent)
    {
        if (event.Scroll.Y > 0)
        {
            this.SpellIndex += 1;
        }
        else 
        {
            this.SpellIndex -= 1;
        }
        this.ChangeSpell();
        
    }
}
