/* ----------------------------------------------------------------------------
** Team MagiDev
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** EnemyShoot.z
**
** Author:
** - Bar Ben-zvi
**
** Contributors:
** - Eli, Nelson
** --------------------------------------------------------------------------*/
//      10        20        30        40        50        60        70        80        90       100
class EnemyShoot : ZilchComponent
{
    [Property] var BulletDelay : Real = 1;
    [Property] var BulletSpeed : Real = 1000;
    [Property] var ShotPattern : ShotPatternID = ShotPatternID.SINGLE;
    [Property] var ShootSound : SoundCue = null;
    var FinishedAnimation : Boolean = false;
    [Property] var WalkAnimation : SpriteSource  = null;
    [Property] var AttackAnimation : SpriteSource  = null;
    var TimeUntilNextShot : Real = 1;
    // A burst is a series of consecutive shots
    [Property] var BurstDelay : Real = 0; // Time between shots within a burst
    var BurstTimer : Real = 0;
    [Property] var BurstCount : Integer = 1;
    var ShotsLeft : Integer = 0;
    var IsBursting : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.TimeUntilNextShot -= event.Dt;
        var radianRotation = Math.ToRadians(this.Owner.Transform.Rotation.Z);
        if (this.Space.FindObjectByName("Player") == null)
        {
            return;
        }
        var shotAngle = Math.Normalize(this.Space.FindObjectByName("Player").Transform.Translation - this.Owner.Transform.Translation);
        if(this.TimeUntilNextShot <= 0 && this.IsBursting == false)
        {
            if(this.AttackAnimation != null)
                this.Owner.Sprite.SpriteSource = this.AttackAnimation;
            var randomGenerator : Random = Random();
            var random = randomGenerator.Range(-0.05, 0.1);
            this.TimeUntilNextShot = this.BulletDelay + random;
            this.BurstTimer = 0;
            this.ShotsLeft = this.BurstCount;
            this.IsBursting = true;
        }
        // Tick down time left bewtween shots
        if (this.IsBursting)
        {
            this.BurstTimer -= event.Dt;
        }
        
        // Fire Shot
        if (this.BurstTimer <= 0 && this.ShotsLeft > 0)
        {
            this.Owner.Shoot.Shoot(this.BulletSpeed, shotAngle, this.ShotPattern);
            if (this.ShootSound != null)
            {
                this.Space.SoundSpace.PlayCue(this.ShootSound);
            }
            this.BurstTimer = this.BurstDelay;
            this.ShotsLeft -= 1;
        }
        
        // End burst
        if (this.ShotsLeft <= 0)
        {
            this.IsBursting = false;
        }
        
        if(this.Owner.Sprite.SpriteSource == this.AttackAnimation)
        {
            if(this.Owner.Sprite.CurrentFrame >= this.AttackAnimation.FrameCount - 1)
                this.FinishedAnimation = true;
            if(this.Owner.Sprite.CurrentFrame == 0 && this.FinishedAnimation)
            {
                this.FinishedAnimation = false;
                
                this.Owner.Sprite.SpriteSource = this.WalkAnimation;
            }
        }
    }
}
