enum MMNodeState {Unknown, Unexplored, Current, Complete}

class MMNode
{
    var State : MMNodeState;
    var Object : Cog;
    constructor(state : MMNodeState, space : Space, minimap : Cog, position : Real3)
    {
        this.State = state;
        this.Object = space.CreateAtPosition(Archetype.MinimapNode, position);
        this.Object.AttachTo(minimap);
    }
}

class Minimap : ZilchComponent
{
    var MMArray : Array[Array[MMNode]] = new Array[Array[MMNode]]();
    var Domensions : Integer = 3;
    
    function Initialize(init : CogInitializer)
    {
        this.MMArray = this.InitMinimap(this.Space.FindObjectByName("Room").RoomScript.MapDimensions);
        this.SetNodeState(Integer2(0, 0), MMNodeState.Current);
    }
    
    function SetNodeState(nodePos : Integer2, newState : MMNodeState)
    {
        this.MMArray[nodePos.X][nodePos.Y].State = newState;
        if(newState == MMNodeState.Unknown)
            this.MMArray[nodePos.X][nodePos.Y].Object.Sprite.Color = Real4(0, 0, 0, 0);
        else if(newState == MMNodeState.Unexplored)
            this.MMArray[nodePos.X][nodePos.Y].Object.Sprite.Color = Real4(1, 0, 0, 1);
        else if(newState == MMNodeState.Current)
            this.MMArray[nodePos.X][nodePos.Y].Object.Sprite.Color = Real4(0, 0, 1, 1);
        else if(newState == MMNodeState.Complete)
            this.MMArray[nodePos.X][nodePos.Y].Object.Sprite.Color = Real4(0, 1, 0, 1);
    }
    
    function GetNodeState(nodePos : Integer2) : MMNodeState
    {
        return this.MMArray[nodePos.X][nodePos.Y].State;
    }
    
    function InitMinimap(dimensions : Integer) : Array[Array[MMNode]]
    {
        var miniMap = new Array[Array[MMNode]]();
        for(var i = 0; i < dimensions; ++i)
        {
            miniMap.Add(new Array[MMNode]());
            for(var j = 0; j < dimensions; ++j)
            {
                miniMap[i].Add(new MMNode(MMNodeState.Unknown, this.Space,
                this.Owner, Real3((3.0 * i - 3) / 10.0, (3.0 * (2 - j) - 3) / 10.0, 0)));
            }
        }
        return miniMap;
    }
}
