class TutorialProgression : ZilchComponent
{
    var TextArray : Array[String] = Array[String]();
    var TextIndex : Integer = 0;
    var FLock : Boolean = false;
    function Initialize(init : CogInitializer)
    {
        this.TextArray.Add("Greetings, Wand Man!");
        this.TextArray.Add("I, the acclaimed Hamburger Wizard, \nwill be your guide in this dungeon.");
        this.TextArray.Add("We will start with the basics.\nUse the WASD keys to move.");
        this.TextArray.Add("Left-click to cast a spell.");
        this.TextArray.Add("Try hitting that pile of bones over there.");
        this.TextArray.Add("Good job!\nBut no wizard worth their salt knows only one spell!");
        this.TextArray.Add("Go pick up that scroll.\nIt contains the Water Stream Spell, which you may find useful.");
        this.TextArray.Add("You can switch between spells using the scroll wheel,\nor Q and E.");
        this.TextArray.Add("You may have noticed that the spell you are currently using\nis displayed in the upper left-hand corner of your screen.");
        this.TextArray.Add("Above this display are your health bar and your fade bar.\nYour health bar displays your current health.");
        this.TextArray.Add("Your fade bar displays the remaining time on your fade ability\nand the remaining cooldown of your fade ability. ");
        this.TextArray.Add("Press space to use your fade ability.\nWhile active, your fade ability allows you to avoid spells cast by enemies.\nTry it now!");
        this.TextArray.Add("Great! You are now ready to face your first enemy!\nPress F to begin the fight!");
        this.TextArray.Add(" ");
        this.TextArray.Add("Now you will face your final challenge!");
        this.TextArray.Add("Enter the door at the far side of this room to continue.\nIf you wish to restart the tutorial, press F");
        this.TextArray.Add("");
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyDown);
        Zero.Connect(this.Space, Events.LeftMouseDown, this.OnLeftMouseDown);
        Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
    }

    function OnMouseScroll(event : ViewportMouseEvent)
    {
        if (this.TextIndex == 8)
        {
            this.IncrementProgression();
        }
    }

    function OnLeftMouseDown(event : ViewportMouseEvent)
    {
        if (this.TextIndex == 4)
        {
            this.IncrementProgression();
        }
    }

    
    function IncrementProgression()
    {
        if (this.TextIndex == 1)
        {
            this.Space.FindObjectByName("TutorialDoor").Sprite.Visible = false;
            this.Space.FindObjectByName("TutorialDoor").Collider.Ghost = false;
        }
        this.Owner.FindChildByName("Tutorial Text").SpriteText.Text = this.TextArray[this.TextIndex];
        if (this.TextIndex == 4)
        {
            this.Space.CreateAtPosition(Archetype.Target, Real3(12,1,0));
            this.FLock = true;
        }
        if (this.TextIndex == 6)
        {
            this.Space.CreateAtPosition(Archetype.TutorialSpellScroll, Real3(8,1,0));
            this.FLock = true;
        }
        if (this.TextIndex == 13)
        {
            this.Space.CreateAtPosition(Archetype.TutorialSkeleton, Real3(12,4,0));
            this.FLock = true;
        }
        if (this.TextIndex == 15)
        {
            this.Space.FindObjectByName("TutorialDoor").Sprite.Visible = true;
            this.Space.FindObjectByName("TutorialDoor").Collider.Ghost = true;
        }
        if (this.TextIndex == 15)
        {
            this.TextIndex = 0;
        }
        this.TextIndex += 1;
    }

    function OnKeyDown(event : KeyboardEvent)
    {
        if (event.Key == Keys.F && this.FLock == false)
        {
            this.IncrementProgression();
        }
        if ((event.Key == Keys.W || event.Key == Keys.S || event.Key == Keys.A || event.Key == Keys.D) && this.TextIndex == 3)
        {
            this.IncrementProgression();
        }
        if ((event.Key == Keys.Q|| event.Key == Keys.E) && this.TextIndex == 8)
        {
            this.IncrementProgression();
        }
        if ((event.Key == Keys.Space) && this.TextIndex == 12)
        {
            this.IncrementProgression();
        }
    }
}
